WrapInjectedFunction(    "OnGetHtmlAncestryInfo",    function (message, sender, sendResponse) {        var gcontext = message.gcontext;        // Result type.        function GetHtmlAncestryInfoResult(nodeHierarchyInfo, retCode) {            var out_result =            {                nodeHierarchyInfo: nodeHierarchyInfo,                retCode: retCode
            };            return out_result;
        }        var errorResult = GetHtmlAncestryInfoResult([], N_FALSE);        //Flags type        var HTML_GET_FLAGS = {            ALL_ANCESTORS: 0x01,	// = AncestryInfoFlags::AIF_GET_ALL_ANCESTORS (Win32Element.h)            ALL_ATTRIBUTES: 0x02,	// = AncestryInfoFlags::AIF_GET_ALL_ATTRIBUTES (Win32Element.h)            GET_SELECTOR_INDEX: 0x04 // = AncestryInfoFlagsHtml::AIF_HTML_GET_SELECTOR_INDEX (aahook.h)
        };        //Utility function        function ConcatAttrMap(attrMap, attrNameArray) {            var out_result = {};            for (var attrName in attrMap) {                out_result[attrName] = attrMap[attrName];
            }            for (var i = 0; i < attrNameArray.length; ++i) {                out_result[attrNameArray[i]] = "";
            }            return out_result;
        }        function AddNodeInfoForElement(            rootDocument,            targetElem,            targetElemId,            nextInterestingParentId,            getFlags, // HTML_GET_FLAGS combination            attrExclusions,            isPresentInSelector, // N_TRUE, N_FALSE            out_nodeHierarchyInfo) {            var requireAllAttributes = ((getFlags & HTML_GET_FLAGS.ALL_ATTRIBUTES) !== 0);            var requireSelectorIndex = ((getFlags & HTML_GET_FLAGS.GET_SELECTOR_INDEX) !== 0);            var computeIndex = ((isPresentInSelector === N_TRUE && requireSelectorIndex) ? N_TRUE : N_FALSE);            // Get the selector info for the target element.            // Index will be -1 for elements that are not present in the selector. The selector attributes            //will still be present.            var selectorResult = gcontext.GetSelectorAttributeList(                rootDocument,                targetElemId,                nextInterestingParentId,                targetElem.tagName.toLowerCase(),                computeIndex);            if (selectorResult.retCode !== N_TRUE) {                gcontext.TraceError("AddNodeInfoForElement: GetSelectorAttributeList failed");                return false;
            }            //Get the other attributes, if requested.            var otherAttributes = (requireAllAttributes                ? gcontext.GetAttrValueListForElement(                    targetElem,                    ConcatAttrMap(selectorResult.attrMap, attrExclusions))                : {});            //Create the info for the current interesting parent.            out_nodeHierarchyInfo.push({                customId: gcontext.ComputeCustomIdWithTabAndFrame(message.tabId, message.frameId, targetElemId),                isPresentInSelector: isPresentInSelector,                selectorInfo: {                    tagName: selectorResult.tagName,                    index: computeIndex === N_TRUE ? selectorResult.index : -1,                    attributes: selectorResult.attrMap
                },                otherAttributes: otherAttributes
            });            return true;
        }        function GetHtmlAncestryInfoForElement(            rootDocument,            crtInterestingParentElem,            crtInterestingParentId,            nextInterestingParentId,            intermediateParents,            getFlags,            out_nodeHierarchyInfo) {            // These attributes are usually very large string values and they are not shown by            //UiExplorer anyway.            var attrExclusions = ["innerhtml", "outerhtml", "outertext"];            //Add the selector info for the current interesting parent node.            if (false === AddNodeInfoForElement(                rootDocument,                crtInterestingParentElem,                crtInterestingParentId,                nextInterestingParentId,                getFlags,                attrExclusions,                N_TRUE, // isPresentInSelector                out_nodeHierarchyInfo)) {                gcontext.TraceError("GetHtmlAncestryInfoForElement: AddNodeInfoForElement failed for interesting element");                return false;
            }            //Create the infos for the intermediate parents.            if (intermediateParents != null) {                for (var i = 0; i < intermediateParents.length; ++i) {                    var intermediateParentElem = intermediateParents[i];                    // Skip the root "HTML" tag element.                    if (!gcontext.IsMainFrame(window)                        && intermediateParentElem === rootDocument.documentElement) {                        break;
                    }                    var intermediateParentId = gcontext.GenerateCustomIdForElement(intermediateParentElem);                    //Add the selector info for the current intermediate parent node.                    if (false === AddNodeInfoForElement(                        rootDocument,                        intermediateParentElem,                        intermediateParentId,                        nextInterestingParentId,                        getFlags,                        attrExclusions,                        N_FALSE, // isPresentInSelector                        out_nodeHierarchyInfo)) {                        gcontext.TraceError("GetHtmlAncestryInfoForElement: AddNodeInfoForElement failed for intermediate parent " + i);                        return false;
                    }
                }
            }            return true;
        }        function GetHtmlAncestryInfo(rootDocument, targetElement, getFlags, previousResultData) {            var out_resultData = (previousResultData != null ? previousResultData : errorResult);            var out_nodeHierarchyInfo = out_resultData.nodeHierarchyInfo;            var requireIntermediateParents = ((getFlags & HTML_GET_FLAGS.ALL_ANCESTORS) !== 0);            // Get ancestry info using interesting parents and the intermediate parents (the elements             //between the interesting parents).            var crtInterestingParentElem = targetElement;            var crtInterestingParentId = gcontext.GetCustomIdForElement(targetElement);            while (crtInterestingParentElem != null) {                var parentHierarchyInfo = {};                var nextInterestingParentElem = gcontext.GetNextInterestingParentForSelector(                    crtInterestingParentElem, requireIntermediateParents, parentHierarchyInfo);                var nextInterestingParentId = "";                if (nextInterestingParentElem != null) {                    nextInterestingParentId = gcontext.GenerateCustomIdForElement(nextInterestingParentElem);
                }                var intermediateParents = parentHierarchyInfo.intermediateParents;                //Get the selector info for the current interesting parent node.                if (false === GetHtmlAncestryInfoForElement(                    rootDocument,                    crtInterestingParentElem, crtInterestingParentId,                    nextInterestingParentId,                    intermediateParents,                    getFlags,                    out_nodeHierarchyInfo)) {                    gcontext.TraceError("GetHtmlAncestryInfo: GetHtmlAncestryInfoForElement failed");                    return errorResult;
                }                //Move to the next interesing parent;                crtInterestingParentElem = nextInterestingParentElem;                crtInterestingParentId = nextInterestingParentId;
            }            out_resultData.retCode = N_TRUE;            return out_resultData;
        }        // Browser dependent        var rootDocument = document;        try {            // special handling of elements inside frames/iframes, which may require cross-origin forwarding            var coFwd = gcontext.COFwdContent();            var coFwdInfo = coFwd.GetFwdRequestInfo(message);            if (coFwdInfo != null) {                gcontext.TraceMessage("OnGetHtmlAncestryInfo: enter cross origin frame");                // Input                var getFlags = coFwdInfo.customData.getFlags;                // Previous output                var out_result = coFwdInfo.previousResult;                // The target element is the source frame element of the cross-origin request.                gcontext.TraceMessage("OnGetHtmlAncestryInfo: getting target element as the source child frame of the cross-origin request");                var targetElement = coFwd.GetSrcChildElementFromRequest(coFwdInfo);
            } else {                gcontext.TraceMessage("OnGetHtmlAncestryInfo: enter main frame");                // Input                var customId = message.customId;                var getFlags = message.getFlags;                // Output                var out_result = GetHtmlAncestryInfoResult([], N_FALSE);                //Search the target element in the custom id cache.                gcontext.TraceMessage("OnGetHtmlAncestryInfo: getting target element from the custom ID cache");                var targetElement = gcontext.g_customIdCache[customId];
            }            if (targetElement == null) {                gcontext.TraceError("OnGetHtmlAncestryInfo: target element cannot be found");                return sendResponse(errorResult);
            }            // Append the rest of the parent hierarchy up to the next interesting parent or cross-origin frame.            out_result = GetHtmlAncestryInfo(rootDocument, targetElement, getFlags, out_result);            // if the targetElement's parent is a document of a child frame, request call forwarding            // to the parent frame, and return the customId of the HTML element which holds the document            if (!gcontext.IsMainFrame(window)) {                gcontext.TraceMessage("OnGetHtmlAncestryInfo: the parent element is a frame/iframe. Request call forwarding to parent frame");                coFwd.AppendFwdRequestToParentFrame(                    message.frameId,                    {                        getFlags: getFlags,
                    },                    errorResult,                    out_result);
            }
        }        catch (e) {            gcontext.TraceError("GetHtmlAncestryInfo exception: " + e);            return sendResponse(errorResult);
        }        sendResponse(out_result);    });