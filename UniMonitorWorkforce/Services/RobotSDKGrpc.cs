// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RobotSDK.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace UniWorkforce.Services {
  public static partial class RobotSDK
  {
    static readonly string __ServiceName = "RobotSDK.RobotSDK";

    static readonly grpc::Marshaller<global::UniWorkforce.Services.LoginRequest> __Marshaller_RobotSDK_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.LoginResponse> __Marshaller_RobotSDK_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.LoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.CheckProcessRequest> __Marshaller_RobotSDK_CheckProcessRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.CheckProcessRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.CheckProcessResponse> __Marshaller_RobotSDK_CheckProcessResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.CheckProcessResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.PublishRequest> __Marshaller_RobotSDK_PublishRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.PublishRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.PublishResponse> __Marshaller_RobotSDK_PublishResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.PublishResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.CheckRobotRequest> __Marshaller_RobotSDK_CheckRobotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.CheckRobotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.CheckRobotResponse> __Marshaller_RobotSDK_CheckRobotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.CheckRobotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.JobLogRequest> __Marshaller_RobotSDK_JobLogRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.JobLogRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.JobLogResponse> __Marshaller_RobotSDK_JobLogResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.JobLogResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.HeartBeatRequest> __Marshaller_RobotSDK_HeartBeatRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.HeartBeatRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.HeartBeatResponse> __Marshaller_RobotSDK_HeartBeatResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.HeartBeatResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.TaskStatusRequest> __Marshaller_RobotSDK_TaskStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.TaskStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.TaskStatusResponse> __Marshaller_RobotSDK_TaskStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.TaskStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.GetRobotTypeRequest> __Marshaller_RobotSDK_GetRobotTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.GetRobotTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.GetRobotTypeResponse> __Marshaller_RobotSDK_GetRobotTypeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.GetRobotTypeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.TaskRequest> __Marshaller_RobotSDK_TaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.TaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UniWorkforce.Services.TaskResponse> __Marshaller_RobotSDK_TaskResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UniWorkforce.Services.TaskResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::UniWorkforce.Services.LoginRequest, global::UniWorkforce.Services.LoginResponse> __Method_DesignerLogin = new grpc::Method<global::UniWorkforce.Services.LoginRequest, global::UniWorkforce.Services.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DesignerLogin",
        __Marshaller_RobotSDK_LoginRequest,
        __Marshaller_RobotSDK_LoginResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.CheckProcessRequest, global::UniWorkforce.Services.CheckProcessResponse> __Method_CheckProcess = new grpc::Method<global::UniWorkforce.Services.CheckProcessRequest, global::UniWorkforce.Services.CheckProcessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckProcess",
        __Marshaller_RobotSDK_CheckProcessRequest,
        __Marshaller_RobotSDK_CheckProcessResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.PublishRequest, global::UniWorkforce.Services.PublishResponse> __Method_PublishProcess = new grpc::Method<global::UniWorkforce.Services.PublishRequest, global::UniWorkforce.Services.PublishResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PublishProcess",
        __Marshaller_RobotSDK_PublishRequest,
        __Marshaller_RobotSDK_PublishResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.CheckRobotRequest, global::UniWorkforce.Services.CheckRobotResponse> __Method_CheckRobot = new grpc::Method<global::UniWorkforce.Services.CheckRobotRequest, global::UniWorkforce.Services.CheckRobotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckRobot",
        __Marshaller_RobotSDK_CheckRobotRequest,
        __Marshaller_RobotSDK_CheckRobotResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.JobLogRequest, global::UniWorkforce.Services.JobLogResponse> __Method_SendJobLog = new grpc::Method<global::UniWorkforce.Services.JobLogRequest, global::UniWorkforce.Services.JobLogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendJobLog",
        __Marshaller_RobotSDK_JobLogRequest,
        __Marshaller_RobotSDK_JobLogResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.HeartBeatRequest, global::UniWorkforce.Services.HeartBeatResponse> __Method_HeartBeat = new grpc::Method<global::UniWorkforce.Services.HeartBeatRequest, global::UniWorkforce.Services.HeartBeatResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HeartBeat",
        __Marshaller_RobotSDK_HeartBeatRequest,
        __Marshaller_RobotSDK_HeartBeatResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.TaskStatusRequest, global::UniWorkforce.Services.TaskStatusResponse> __Method_SendTaskStatus = new grpc::Method<global::UniWorkforce.Services.TaskStatusRequest, global::UniWorkforce.Services.TaskStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendTaskStatus",
        __Marshaller_RobotSDK_TaskStatusRequest,
        __Marshaller_RobotSDK_TaskStatusResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.GetRobotTypeRequest, global::UniWorkforce.Services.GetRobotTypeResponse> __Method_GetRobotTypeList = new grpc::Method<global::UniWorkforce.Services.GetRobotTypeRequest, global::UniWorkforce.Services.GetRobotTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotTypeList",
        __Marshaller_RobotSDK_GetRobotTypeRequest,
        __Marshaller_RobotSDK_GetRobotTypeResponse);

    static readonly grpc::Method<global::UniWorkforce.Services.TaskRequest, global::UniWorkforce.Services.TaskResponse> __Method_GetTask = new grpc::Method<global::UniWorkforce.Services.TaskRequest, global::UniWorkforce.Services.TaskResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetTask",
        __Marshaller_RobotSDK_TaskRequest,
        __Marshaller_RobotSDK_TaskResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::UniWorkforce.Services.RobotSDKReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RobotSDK</summary>
    [grpc::BindServiceMethod(typeof(RobotSDK), "BindService")]
    public abstract partial class RobotSDKBase
    {
      /// <summary>
      ///设计器登录校验
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.LoginResponse> DesignerLogin(global::UniWorkforce.Services.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///验证流程是否存在
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.CheckProcessResponse> CheckProcess(global::UniWorkforce.Services.CheckProcessRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发布流程和数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.PublishResponse> PublishProcess(global::UniWorkforce.Services.PublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///校验机器唯一码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.CheckRobotResponse> CheckRobot(global::UniWorkforce.Services.CheckRobotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///接收日志信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.JobLogResponse> SendJobLog(global::UniWorkforce.Services.JobLogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///接收心跳
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.HeartBeatResponse> HeartBeat(global::UniWorkforce.Services.HeartBeatRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///任务完成通知服务端
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.TaskStatusResponse> SendTaskStatus(global::UniWorkforce.Services.TaskStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取厂商列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::UniWorkforce.Services.GetRobotTypeResponse> GetRobotTypeList(global::UniWorkforce.Services.GetRobotTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///任务推送
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTask(grpc::IAsyncStreamReader<global::UniWorkforce.Services.TaskRequest> requestStream, grpc::IServerStreamWriter<global::UniWorkforce.Services.TaskResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RobotSDK</summary>
    public partial class RobotSDKClient : grpc::ClientBase<RobotSDKClient>
    {
      /// <summary>Creates a new client for RobotSDK</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RobotSDKClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RobotSDK that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RobotSDKClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RobotSDKClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RobotSDKClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///设计器登录校验
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.LoginResponse DesignerLogin(global::UniWorkforce.Services.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DesignerLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///设计器登录校验
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.LoginResponse DesignerLogin(global::UniWorkforce.Services.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DesignerLogin, null, options, request);
      }
      /// <summary>
      ///设计器登录校验
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.LoginResponse> DesignerLoginAsync(global::UniWorkforce.Services.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DesignerLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///设计器登录校验
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.LoginResponse> DesignerLoginAsync(global::UniWorkforce.Services.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DesignerLogin, null, options, request);
      }
      /// <summary>
      ///验证流程是否存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.CheckProcessResponse CheckProcess(global::UniWorkforce.Services.CheckProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckProcess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///验证流程是否存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.CheckProcessResponse CheckProcess(global::UniWorkforce.Services.CheckProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckProcess, null, options, request);
      }
      /// <summary>
      ///验证流程是否存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.CheckProcessResponse> CheckProcessAsync(global::UniWorkforce.Services.CheckProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckProcessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///验证流程是否存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.CheckProcessResponse> CheckProcessAsync(global::UniWorkforce.Services.CheckProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckProcess, null, options, request);
      }
      /// <summary>
      ///发布流程和数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.PublishResponse PublishProcess(global::UniWorkforce.Services.PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishProcess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发布流程和数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.PublishResponse PublishProcess(global::UniWorkforce.Services.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PublishProcess, null, options, request);
      }
      /// <summary>
      ///发布流程和数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.PublishResponse> PublishProcessAsync(global::UniWorkforce.Services.PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishProcessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发布流程和数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.PublishResponse> PublishProcessAsync(global::UniWorkforce.Services.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PublishProcess, null, options, request);
      }
      /// <summary>
      ///校验机器唯一码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.CheckRobotResponse CheckRobot(global::UniWorkforce.Services.CheckRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckRobot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///校验机器唯一码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.CheckRobotResponse CheckRobot(global::UniWorkforce.Services.CheckRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckRobot, null, options, request);
      }
      /// <summary>
      ///校验机器唯一码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.CheckRobotResponse> CheckRobotAsync(global::UniWorkforce.Services.CheckRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckRobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///校验机器唯一码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.CheckRobotResponse> CheckRobotAsync(global::UniWorkforce.Services.CheckRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckRobot, null, options, request);
      }
      /// <summary>
      ///接收日志信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.JobLogResponse SendJobLog(global::UniWorkforce.Services.JobLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendJobLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///接收日志信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.JobLogResponse SendJobLog(global::UniWorkforce.Services.JobLogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendJobLog, null, options, request);
      }
      /// <summary>
      ///接收日志信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.JobLogResponse> SendJobLogAsync(global::UniWorkforce.Services.JobLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendJobLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///接收日志信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.JobLogResponse> SendJobLogAsync(global::UniWorkforce.Services.JobLogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendJobLog, null, options, request);
      }
      /// <summary>
      ///接收心跳
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.HeartBeatResponse HeartBeat(global::UniWorkforce.Services.HeartBeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HeartBeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///接收心跳
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.HeartBeatResponse HeartBeat(global::UniWorkforce.Services.HeartBeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HeartBeat, null, options, request);
      }
      /// <summary>
      ///接收心跳
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.HeartBeatResponse> HeartBeatAsync(global::UniWorkforce.Services.HeartBeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HeartBeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///接收心跳
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.HeartBeatResponse> HeartBeatAsync(global::UniWorkforce.Services.HeartBeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HeartBeat, null, options, request);
      }
      /// <summary>
      ///任务完成通知服务端
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.TaskStatusResponse SendTaskStatus(global::UniWorkforce.Services.TaskStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTaskStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///任务完成通知服务端
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.TaskStatusResponse SendTaskStatus(global::UniWorkforce.Services.TaskStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTaskStatus, null, options, request);
      }
      /// <summary>
      ///任务完成通知服务端
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.TaskStatusResponse> SendTaskStatusAsync(global::UniWorkforce.Services.TaskStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTaskStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///任务完成通知服务端
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.TaskStatusResponse> SendTaskStatusAsync(global::UniWorkforce.Services.TaskStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTaskStatus, null, options, request);
      }
      /// <summary>
      ///获取厂商列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.GetRobotTypeResponse GetRobotTypeList(global::UniWorkforce.Services.GetRobotTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取厂商列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::UniWorkforce.Services.GetRobotTypeResponse GetRobotTypeList(global::UniWorkforce.Services.GetRobotTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotTypeList, null, options, request);
      }
      /// <summary>
      ///获取厂商列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.GetRobotTypeResponse> GetRobotTypeListAsync(global::UniWorkforce.Services.GetRobotTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取厂商列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::UniWorkforce.Services.GetRobotTypeResponse> GetRobotTypeListAsync(global::UniWorkforce.Services.GetRobotTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotTypeList, null, options, request);
      }
      /// <summary>
      ///任务推送
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::UniWorkforce.Services.TaskRequest, global::UniWorkforce.Services.TaskResponse> GetTask(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTask(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///任务推送
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::UniWorkforce.Services.TaskRequest, global::UniWorkforce.Services.TaskResponse> GetTask(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetTask, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RobotSDKClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RobotSDKClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RobotSDKBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DesignerLogin, serviceImpl.DesignerLogin)
          .AddMethod(__Method_CheckProcess, serviceImpl.CheckProcess)
          .AddMethod(__Method_PublishProcess, serviceImpl.PublishProcess)
          .AddMethod(__Method_CheckRobot, serviceImpl.CheckRobot)
          .AddMethod(__Method_SendJobLog, serviceImpl.SendJobLog)
          .AddMethod(__Method_HeartBeat, serviceImpl.HeartBeat)
          .AddMethod(__Method_SendTaskStatus, serviceImpl.SendTaskStatus)
          .AddMethod(__Method_GetRobotTypeList, serviceImpl.GetRobotTypeList)
          .AddMethod(__Method_GetTask, serviceImpl.GetTask).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RobotSDKBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DesignerLogin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.LoginRequest, global::UniWorkforce.Services.LoginResponse>(serviceImpl.DesignerLogin));
      serviceBinder.AddMethod(__Method_CheckProcess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.CheckProcessRequest, global::UniWorkforce.Services.CheckProcessResponse>(serviceImpl.CheckProcess));
      serviceBinder.AddMethod(__Method_PublishProcess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.PublishRequest, global::UniWorkforce.Services.PublishResponse>(serviceImpl.PublishProcess));
      serviceBinder.AddMethod(__Method_CheckRobot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.CheckRobotRequest, global::UniWorkforce.Services.CheckRobotResponse>(serviceImpl.CheckRobot));
      serviceBinder.AddMethod(__Method_SendJobLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.JobLogRequest, global::UniWorkforce.Services.JobLogResponse>(serviceImpl.SendJobLog));
      serviceBinder.AddMethod(__Method_HeartBeat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.HeartBeatRequest, global::UniWorkforce.Services.HeartBeatResponse>(serviceImpl.HeartBeat));
      serviceBinder.AddMethod(__Method_SendTaskStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.TaskStatusRequest, global::UniWorkforce.Services.TaskStatusResponse>(serviceImpl.SendTaskStatus));
      serviceBinder.AddMethod(__Method_GetRobotTypeList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UniWorkforce.Services.GetRobotTypeRequest, global::UniWorkforce.Services.GetRobotTypeResponse>(serviceImpl.GetRobotTypeList));
      serviceBinder.AddMethod(__Method_GetTask, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::UniWorkforce.Services.TaskRequest, global::UniWorkforce.Services.TaskResponse>(serviceImpl.GetTask));
    }

  }
}
#endregion
